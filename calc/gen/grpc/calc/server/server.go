// Code generated by goa v3.7.3, DO NOT EDIT.
//
// calc gRPC server
//
// Command:
// $ goa gen calc/design

package server

import (
	calc "calc/gen/calc"
	calcpb "calc/gen/grpc/calc/pb"
	"context"
	"errors"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the calcpb.CalcServer interface.
type Server struct {
	AddH    goagrpc.UnaryHandler
	SubH    goagrpc.UnaryHandler
	MulH    goagrpc.UnaryHandler
	DivideH goagrpc.UnaryHandler
	calcpb.UnimplementedCalcServer
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the calc service endpoints.
func New(e *calc.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		AddH:    NewAddHandler(e.Add, uh),
		SubH:    NewSubHandler(e.Sub, uh),
		MulH:    NewMulHandler(e.Mul, uh),
		DivideH: NewDivideHandler(e.Divide, uh),
	}
}

// NewAddHandler creates a gRPC handler which serves the "calc" service "add"
// endpoint.
func NewAddHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeAddRequest, EncodeAddResponse)
	}
	return h
}

// Add implements the "Add" method in calcpb.CalcServer interface.
func (s *Server) Add(ctx context.Context, message *calcpb.AddRequest) (*calcpb.AddResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "add")
	ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
	resp, err := s.AddH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*calcpb.AddResponse), nil
}

// NewSubHandler creates a gRPC handler which serves the "calc" service "sub"
// endpoint.
func NewSubHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSubRequest, EncodeSubResponse)
	}
	return h
}

// Sub implements the "Sub" method in calcpb.CalcServer interface.
func (s *Server) Sub(ctx context.Context, message *calcpb.SubRequest) (*calcpb.SubResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "sub")
	ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
	resp, err := s.SubH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*calcpb.SubResponse), nil
}

// NewMulHandler creates a gRPC handler which serves the "calc" service "mul"
// endpoint.
func NewMulHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeMulRequest, EncodeMulResponse)
	}
	return h
}

// Mul implements the "Mul" method in calcpb.CalcServer interface.
func (s *Server) Mul(ctx context.Context, message *calcpb.MulRequest) (*calcpb.MulResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "mul")
	ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
	resp, err := s.MulH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*calcpb.MulResponse), nil
}

// NewDivideHandler creates a gRPC handler which serves the "calc" service
// "divide" endpoint.
func NewDivideHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeDivideRequest, EncodeDivideResponse)
	}
	return h
}

// Divide implements the "Divide" method in calcpb.CalcServer interface.
func (s *Server) Divide(ctx context.Context, message *calcpb.DivideRequest) (*calcpb.DivideResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "divide")
	ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
	resp, err := s.DivideH.Handle(ctx, message)
	if err != nil {
		var en ErrorNamer
		if errors.As(err, &en) {
			switch en.ErrorName() {
			case "DivByZero":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*calcpb.DivideResponse), nil
}
