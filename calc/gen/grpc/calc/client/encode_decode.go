// Code generated by goa v3.7.3, DO NOT EDIT.
//
// calc gRPC client encoders and decoders
//
// Command:
// $ goa gen calc/design

package client

import (
	calc "calc/gen/calc"
	calcpb "calc/gen/grpc/calc/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildAddFunc builds the remote method to invoke for "calc" service "add"
// endpoint.
func BuildAddFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*calcpb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &calcpb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to calc add endpoint.
func EncodeAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*calc.AddPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "add", "*calc.AddPayload", v)
	}
	return NewProtoAddRequest(payload), nil
}

// DecodeAddResponse decodes responses from the calc add endpoint.
func DecodeAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*calcpb.AddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "add", "*calcpb.AddResponse", v)
	}
	res := NewAddResult(message)
	return res, nil
}

// BuildSubFunc builds the remote method to invoke for "calc" service "sub"
// endpoint.
func BuildSubFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Sub(ctx, reqpb.(*calcpb.SubRequest), opts...)
		}
		return grpccli.Sub(ctx, &calcpb.SubRequest{}, opts...)
	}
}

// EncodeSubRequest encodes requests sent to calc sub endpoint.
func EncodeSubRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*calc.SubPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "sub", "*calc.SubPayload", v)
	}
	return NewProtoSubRequest(payload), nil
}

// DecodeSubResponse decodes responses from the calc sub endpoint.
func DecodeSubResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*calcpb.SubResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "sub", "*calcpb.SubResponse", v)
	}
	res := NewSubResult(message)
	return res, nil
}

// BuildMulFunc builds the remote method to invoke for "calc" service "mul"
// endpoint.
func BuildMulFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Mul(ctx, reqpb.(*calcpb.MulRequest), opts...)
		}
		return grpccli.Mul(ctx, &calcpb.MulRequest{}, opts...)
	}
}

// EncodeMulRequest encodes requests sent to calc mul endpoint.
func EncodeMulRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*calc.MulPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "mul", "*calc.MulPayload", v)
	}
	return NewProtoMulRequest(payload), nil
}

// DecodeMulResponse decodes responses from the calc mul endpoint.
func DecodeMulResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*calcpb.MulResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "mul", "*calcpb.MulResponse", v)
	}
	res := NewMulResult(message)
	return res, nil
}

// BuildDivideFunc builds the remote method to invoke for "calc" service
// "divide" endpoint.
func BuildDivideFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Divide(ctx, reqpb.(*calcpb.DivideRequest), opts...)
		}
		return grpccli.Divide(ctx, &calcpb.DivideRequest{}, opts...)
	}
}

// EncodeDivideRequest encodes requests sent to calc divide endpoint.
func EncodeDivideRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*calc.DividePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "divide", "*calc.DividePayload", v)
	}
	return NewProtoDivideRequest(payload), nil
}

// DecodeDivideResponse decodes responses from the calc divide endpoint.
func DecodeDivideResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*calcpb.DivideResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "divide", "*calcpb.DivideResponse", v)
	}
	res := NewDivideResult(message)
	return res, nil
}
