// Code generated by goa v3.7.3, DO NOT EDIT.
//
// calc gRPC client CLI support package
//
// Command:
// $ goa gen calc/design

package client

import (
	calc "calc/gen/calc"
	calcpb "calc/gen/grpc/calc/pb"
	"encoding/json"
	"fmt"
)

// BuildAddPayload builds the payload for the calc add endpoint from CLI flags.
func BuildAddPayload(calcAddMessage string) (*calc.AddPayload, error) {
	var err error
	var message calcpb.AddRequest
	{
		if calcAddMessage != "" {
			err = json.Unmarshal([]byte(calcAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"a\": 5850431520333673251,\n      \"b\": 1089204046671954241\n   }'")
			}
		}
	}
	v := &calc.AddPayload{
		A: int(message.A),
		B: int(message.B),
	}

	return v, nil
}

// BuildSubPayload builds the payload for the calc sub endpoint from CLI flags.
func BuildSubPayload(calcSubMessage string) (*calc.SubPayload, error) {
	var err error
	var message calcpb.SubRequest
	{
		if calcSubMessage != "" {
			err = json.Unmarshal([]byte(calcSubMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"a\": 8614350958614154271,\n      \"b\": 4285228716133201605\n   }'")
			}
		}
	}
	v := &calc.SubPayload{
		A: int(message.A),
		B: int(message.B),
	}

	return v, nil
}

// BuildMulPayload builds the payload for the calc mul endpoint from CLI flags.
func BuildMulPayload(calcMulMessage string) (*calc.MulPayload, error) {
	var err error
	var message calcpb.MulRequest
	{
		if calcMulMessage != "" {
			err = json.Unmarshal([]byte(calcMulMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"a\": 6525775414444532386,\n      \"b\": 5635247262153220700\n   }'")
			}
		}
	}
	v := &calc.MulPayload{
		A: int(message.A),
		B: int(message.B),
	}

	return v, nil
}

// BuildDividePayload builds the payload for the calc divide endpoint from CLI
// flags.
func BuildDividePayload(calcDivideMessage string) (*calc.DividePayload, error) {
	var err error
	var message calcpb.DivideRequest
	{
		if calcDivideMessage != "" {
			err = json.Unmarshal([]byte(calcDivideMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"a\": 5487677923305002774,\n      \"b\": 1187293393747494935\n   }'")
			}
		}
	}
	v := &calc.DividePayload{
		A: int(message.A),
		B: int(message.B),
	}

	return v, nil
}
